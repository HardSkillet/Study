using System;
using System.Threading;

/*
 * Для доступа к ресурсу необходимо:
 * 1. Выделить память для типа (оператор new)
 * 2. Инициализировать выделенную память, установив начальное состояние ресурса и сделав его пригодным к использованию (конструктор)
 * 3. Использовать ресурс, обращаясь к членам его типа
 * 4. В рамках процедуры очистки уничтожить состояние ресурса
 * 5. Освободить память. (Уборщик муссора)
 */

//При инициализации процесса CLR резервирует область адрессного пространства под управялемую кучу, а так же указатель NextObjPtr

/*
 * Для управления сроком жизни объектов используется алгоритм подсчета ссылок. Каждый объект хранит внутреннее поле о том, сколько частей программы на данный момент исполбзуют этот объект.
 * Когда счетчик достигает нуля, объект удаляется из памяти.
 * Возникает проблема перекрестных ссылок
 */

/*
 * Порядок сборки муссора:
 * 1. Алгоритм маркировки
 * 2. Сжатие - при перемещении из каждого адреса вычитается количество байт (сдвиг)
 * 3. Перенос указателя NewObjPtr
 */

/*
 * Уборщик муссора с поддержкой поколений
 * При уборке муссора в поколении 0 или 1 объекты, пережившие уборку мусора переходят в следующее поколение.
 * Поколений 3: 0, 1, 2
 */

/*
 * Запуск сборки мусора:
 * 1. Объем поколения 0 достиг порогового значения
 * 2. Вызов статического метода Collect объекта System.GC
 * 3. Windows сообщает о нехватке памяти
 * 4. Выгрузка домена приложения
 * 5. Завершение работы CLR
 */

/*
 * Режимы уборки муссора:
    * Режим рабочей станции (для клиентских приложений) - уборка мусора не занимает все ресурсы системы, чтобы не раздражать пользователя прерываниями
    * Режим сервера - оптимизирует уборку мусора, бросает все ресурсы процессора на уборку мусора
Включение режима сервера в .csproj:
<configuration>
    <runtime>
        <gcServer enabled="true"/>    
    </runtime>
</configuration>
    * Параллельная - требует больше ресурсов, использует вспомогательный поток для разметки, работает быстрее
    * Непараллельная - требует меньше ресурсов, работает медленнее
Отключение режима параллельной уборки в .csproj:
<configuration>
    <runtime>
        <gcConcurrent enabled="false"/>    
    </runtime>
</configuration>
 */

/*
 * Инструкция using(T t = new T(...)) {...} может быть применима только к объекту, наследующему интерфейс IDisposable, и после выполнения кода внутри {} применяет метод Dispose к переменной t
 */

namespace ChapterXX.AutomaticMemoryManagement
{
    class Program
    {
        static void Main(string[] args)
        {
            Timer t = new Timer(TimerCallBack, null, 0, 2000);
            Console.ReadLine();
            
        }
        private static void TimerCallBack(Object o) {
            Console.WriteLine("In timerCallback: " + DateTime.Now);
            GC.Collect();
        }
    }
}
